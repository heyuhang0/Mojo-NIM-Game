global Alufn {
  const ADD = 6b000000;
  const SUB = 6b000001;
  const MUL = 6b000010;
  const AND = 6b011000;
  const OR  = 6b011110;
  const XOR = 6b010110;
  const A   = 6b011010;
  const NOTA= 6b010101;
  const B   = 6b011100;
  const NOTB= 6b010011;
  const NOR = 6b010001;
  const XNOR= 6b011001;
  const NAND= 6b010111;
  const SHL = 6b100000;
  const SHR = 6b100001;
  const SRA = 6b100011;
  const CMPEQ = 6b110011;
  const CMPLT = 6b110101;
  const CMPLE = 6b110111;
}

module alu (
    input a[16],
    input b[16],
    input alufn[6],
    
    output z,
    output v,
    output n,
    output out[16]
  ) {
  alu_adder aluadder;
  alu_boolean aluboolean;
  alu_compare alucompare;
  alu_shifter alushifter;
  always {
    out = 16b0;
    // adder
    aluadder.a = a;
    aluadder.b = b;
    aluadder.alufn = alufn;
    
    // boole 
    aluboolean.a = a;
    aluboolean.b = b;
    aluboolean.alufn = alufn;
    
    // compare 
    alucompare.z = aluadder.z;
    alucompare.v = aluadder.v;
    alucompare.n = aluadder.n;
    alucompare.alufn = alufn;
    
    // shift 
    alushifter.a = a;
    alushifter.b = b[3:0];
    alushifter.alufn = alufn;
    
    // output
    z = aluadder.z;
    v = aluadder.v;
    n = aluadder.n;
    case(alufn[5:4]) {
      b00:
        out = aluadder.s;
      b01:
        out = aluboolean.boole;
      b10:
        out = alushifter.shift;
      b11:
        out = alucompare.comp;
    }
  }
}
