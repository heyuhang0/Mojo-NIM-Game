/* NIM Game FSM (Control Unit)
*/

module game_fsm (
    input clk,  // clock
    input rst,  // reset
    
    input btn_r1,
    input btn_r2,
    input btn_r3,
    input btn_r4,
    input btn_toggle,
    input num_players[2],
    
    input alu_z,
    
    output alufn[6],
    output asel[2],
    output bsel[2],
    output regfile_we,
    output regfile_write_address[3],
    output regfile_read_address_a[3],
    output regfile_read_address_b[3],
    output halted
  ) {
  
  .clk(clk) {
    /* The FSM implements following C-style code
    // registers
    short row1, row2, row3, row4;  // number of stones in each row
    short player;      // current player index, can be 0, 1, 2
    short R0, R1, R2   // temporary variables

    // imputs
    bool btn_r1, btn_r2, btn_r3, btn_r4, btn_toggle; // button inputs
    char num_player;  // number of players, can be 1(for PVE), 2 and 3

    // other functions
    short rand();      // function that returns 16-bit random integer

    (continues in fsm definition)
    */
    fsm game_fsm = {
      START,

      // randomly initialize number of stones in each row
      INIT_ROW1,                // row1 = rand();
      INIT_ROW1_CHECK,          // if (row1 == 0) goto INIT_ROW1;
      INIT_ROW2,                // row2 = rand();
      INIT_ROW2_CHECK,          // if (row2 == 0)    goto INIT_ROW2;
      INIT_ROW2_CHECK_UNIQUE_1, // if (row2 == row1) goto INIT_ROW2;
      INIT_ROW3,                // row3 = rand();
      INIT_ROW3_CHECK,          // if (row3 == 0)    goto INIT_ROW3;
      INIT_ROW3_CHECK_UNIQUE_1, // if (row3 == row1) goto INIT_ROW3;
      INIT_ROW3_CHECK_UNIQUE_2, // if (row3 == row2) goto INIT_ROW3;
      INIT_ROW4,                // row4 = rand();
      INIT_ROW4_CHECK,          // if (row4 == 0)    goto INIT_ROW4;
      INIT_ROW4_CHECK_UNIQUE_1, // if (row4 == row1) goto INIT_ROW4;
      INIT_ROW4_CHECK_UNIQUE_2, // if (row4 == row2) goto INIT_ROW4;
      INIT_ROW4_CHECK_UNIQUE_3, // if (row4 == row3) goto INIT_ROW4;
                                // else goto P_FIRST_SEL;
      
      // toggle player and goto corresponding player/computer branch
      TOGGLE_PLAYER,            // player ++; if (num_player == 2) goto TOGGLE_PLAYER_2; else if (num_player == 3) goto TOGGLE_PLAYER_3;
      TOGGLE_PLAYER_1,          // R0 = (player >= 2); goto TOGGLE_PLAYER_PVE_CHECK;
      TOGGLE_PLAYER_2,          // R0 = (player >= 2); goto TOGGLE_PLAYER_PVP_CHECK;
      TOGGLE_PLAYER_3,          // R0 = (player >= 3); goto TOGGLE_PLAYER_PVP_CHECK;
      TOGGLE_PLAYER_PVE_CHECK,  // if (R0) goto TOGGLE_PLAYER_RESET; else goto XOR_12;
      TOGGLE_PLAYER_PVP_CHECK,  // if (R0) goto TOGGLE_PLAYER_RESET; else goto P_FISRT_SEL;
      TOGGLE_PLAYER_RESET,      // R0 = 0;
      
      // human player's turn
      P_FISRT_SEL,  // if (btn_r1) goto P_R1_FIRST;
                    // else if (btn_r2) goto P_R2_FIRST;
                    // else if (btn r3) goto P_R3_FIRST;
                    // else if (btn r4) goto P_R4_FIRST;
                    // else goto P_FISRT_SEL; // wait for valid input
      
      P_R1_FIRST,   // if (row1 == 0) goto P_FISRT_SEL;
      P_R1_REMOVE,  // row1--;
      P_R1_IDLE,    // if (btn_r1) goto P_R1_CHECK; else if (btn_toggle) goto SUM_12; else goto P_R1_IDLE;
      P_R1_CHECK,   // if (row1 == 0) goto P_R1_IDLE; else goto P_R1_REMOVE;
      
      P_R2_FIRST,   // if (row2 == 0) goto P_FISRT_SEL;
      P_R2_REMOVE,  // row2--;
      P_R2_IDLE,    // if (btn_r2) goto P_R2_CHECK; else if (btn_toggle) goto SUM_12; else goto P_R2_IDLE; 
      P_R2_CHECK,   // if (row2 == 0) goto P_R2_IDLE; else goto P_R2_REMOVE;
      
      P_R3_FIRST,   // if (row3 == 0) goto P_FISRT_SEL;
      P_R3_REMOVE,  // row3--;
      P_R3_IDLE,    // if (btn_r3) goto P_R3_CHECK; else if (btn_toggle) goto SUM_12; else goto P_R3_IDLE; 
      P_R3_CHECK,   // if (row3 == 0) goto P_R3_IDLE; else goto P_R3_REMOVE;
      
      P_R4_FIRST,   // if (row4 == 0) goto P_FISRT_SEL;
      P_R4_REMOVE,  // row4--;
      P_R4_IDLE,    // if (btn_r4) goto P_R4_CHECK; else if (btn_toggle) goto SUM_12; else goto P_R4_IDLE; 
      P_R4_CHECK,   // if (row4 == 0) goto P_R4_IDLE; else goto P_R4_REMOVE;
      
      // computer's turn (only in single player mode)
      // implementation of https://en.wikipedia.org/wiki/Nim#Mathematical_theory
      // the goal is to find a valid move
      // so that row1^row2^row3^row4 = 0
      // which is the winning position
      // if can not find, just remove one stone from a non-empty row
      XOR_12,     // R0 = row1 ^ row2;
      XOR_123,    // R0 ^= row3;
      XOR_1234,   // R0 ^= row4;
      
      E_R1_COMPUTE,       // R1 = R0 ^ row1;              // R1 = row2 ^ row3 ^ row4
      E_R1_CHECK,         // R2 = (R1 <= row1);           // check if it is valid to let row1 = R1
      E_R1_CHECK_BRANCH,  // if (!R2) goto E_R2_COMPUTE;  // otherwise try row2
      E_R1_REMOVE,        // row1 = R1; goto SUM_12;      // let row1 = R1, so that row1^row2^row3^row4 = 0
      
      E_R2_COMPUTE,       // R1 = R0 ^ row2;
      E_R2_CHECK,         // R2 = (R1 <= row2);
      E_R2_CHECK_BRANCH,  // if (!R2) goto E_R3_COMPUTE;
      E_R2_REMOVE,        // row2 = R1; goto SUM_12;
      
      E_R3_COMPUTE,       // R1 = R0 ^ row3;
      E_R3_CHECK,         // R2 = (R1 <= row3);
      E_R3_CHECK_BRANCH,  // if (!R2) goto E_R4_COMPUTE;
      E_R3_REMOVE,        // row3 = R1; goto SUM_12;
      
      E_R4_COMPUTE,       // R1 = R0 ^ row4;
      E_R4_CHECK,         // R2 = (R1 <= row4);
      E_R4_CHECK_BRANCH,  // if (!R2) goto E_R1_NZ_CHECK; // can not find winning position, fallback
      E_R4_REMOVE,        // row4 = R1; goto SUM_12;
      
      E_R1_NZ_CHECK,   // if (row1 == 0) goto E_R2_NZ_CHECK;
      E_R1_REMOVE_ONE, // row1 --; goto SUM_12;
      
      E_R2_NZ_CHECK,   // if (row2 == 0) goto E_R3_NZ_CHECK;
      E_R2_REMOVE_ONE, // row2 --; goto SUM_12;
      
      E_R3_NZ_CHECK,   // if (row3 == 0) goto E_R4_NZ_CHECK;
      E_R3_REMOVE_ONE, // row3 --; goto SUM_12;
      
      E_R4_REMOVE_ONE, // row4 --;
      
      SUM_12,     // R0 = row1 + row2;
      SUM_123,    // R0 += row3;
      SUM_1234,   // R0 += row4;
      CHECK_SUM,  // if (R0 == 0) goto END; else goto TOGGLE_PLAYER;
      
      END  // while(1);
    };
  }

  always {
    halted = 0;
    alufn = 0;
    asel = ASel.REG_A;
    bsel = BSel.REG_B;
    regfile_we = 0;
    regfile_write_address = 0;
    regfile_read_address_a = 0;
    regfile_read_address_b = 0;
    
    if (rst) {
      game_fsm.d = game_fsm.START;
    } else {
      case (game_fsm.q) {     
        game_fsm.START:
          game_fsm.d = game_fsm.INIT_ROW1;
        
        game_fsm.INIT_ROW1:
          alufn = Alufn.AND;
          asel = ASel.RANDOM;
          bsel = BSel.CONST_7;
          
          regfile_we = 1;
          regfile_write_address = Reg.ROW1;

          game_fsm.d = game_fsm.INIT_ROW1_CHECK;
        
        game_fsm.INIT_ROW1_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW1;
          bsel = BSel.CONST_0;

          if (alu_z) {
            game_fsm.d = game_fsm.INIT_ROW1;
          } else {
            game_fsm.d = game_fsm.INIT_ROW2;
          }
        
        game_fsm.INIT_ROW2:
          alufn = Alufn.AND;
          asel = ASel.RANDOM;
          bsel = BSel.CONST_7;
          
          regfile_we = 1;
          regfile_write_address = Reg.ROW2;
          
          game_fsm.d = game_fsm.INIT_ROW2_CHECK;
        
        game_fsm.INIT_ROW2_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW2;
          bsel = BSel.CONST_0;

          if (alu_z) {
            game_fsm.d = game_fsm.INIT_ROW2;
          } else {
            game_fsm.d = game_fsm.INIT_ROW2_CHECK_UNIQUE_1;
          }
        
        game_fsm.INIT_ROW2_CHECK_UNIQUE_1:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW2;
          regfile_read_address_b = Reg.ROW1;

          if (alu_z) {
            game_fsm.d = game_fsm.INIT_ROW2;
          } else {
            game_fsm.d = game_fsm.INIT_ROW3;
          }
        
        game_fsm.INIT_ROW3:
          alufn = Alufn.AND;
          asel = ASel.RANDOM;
          bsel = BSel.CONST_7;
          
          regfile_we = 1;
          regfile_write_address = Reg.ROW3;
          
          game_fsm.d = game_fsm.INIT_ROW3_CHECK;
        
        game_fsm.INIT_ROW3_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW3;
          bsel = BSel.CONST_0;

          if (alu_z) {
            game_fsm.d = game_fsm.INIT_ROW3;
          } else {
            game_fsm.d = game_fsm.INIT_ROW3_CHECK_UNIQUE_1;
          }
        
        game_fsm.INIT_ROW3_CHECK_UNIQUE_1:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW3;
          regfile_read_address_b = Reg.ROW1;

          if (alu_z) {
            game_fsm.d = game_fsm.INIT_ROW3;
          } else {
            game_fsm.d = game_fsm.INIT_ROW3_CHECK_UNIQUE_2;
          }
          
        game_fsm.INIT_ROW3_CHECK_UNIQUE_2:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW3;
          regfile_read_address_b = Reg.ROW2;

          if (alu_z) {
            game_fsm.d = game_fsm.INIT_ROW3;
          } else {
            game_fsm.d = game_fsm.INIT_ROW4;
          }
        
        game_fsm.INIT_ROW4:
          alufn = Alufn.AND;
          asel = ASel.RANDOM;
          bsel = BSel.CONST_7;
          
          regfile_we = 1;
          regfile_write_address = Reg.ROW4;
          
          game_fsm.d = game_fsm.INIT_ROW4_CHECK;
        
        game_fsm.INIT_ROW4_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW4;
          bsel = BSel.CONST_0;

          if (alu_z) {
            game_fsm.d = game_fsm.INIT_ROW4;
          } else {
            game_fsm.d = game_fsm.INIT_ROW4_CHECK_UNIQUE_1;
          }
        
        game_fsm.INIT_ROW4_CHECK_UNIQUE_1:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW4;
          regfile_read_address_b = Reg.ROW1;

          if (alu_z) {
            game_fsm.d = game_fsm.INIT_ROW4;
          } else {
            game_fsm.d = game_fsm.INIT_ROW4_CHECK_UNIQUE_2;
          }
          
        game_fsm.INIT_ROW4_CHECK_UNIQUE_2:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW4;
          regfile_read_address_b = Reg.ROW2;

          if (alu_z) {
            game_fsm.d = game_fsm.INIT_ROW4;
          } else {
            game_fsm.d = game_fsm.INIT_ROW4_CHECK_UNIQUE_3;
          }
        
        game_fsm.INIT_ROW4_CHECK_UNIQUE_3:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW4;
          regfile_read_address_b = Reg.ROW3;

          if (alu_z) {
            game_fsm.d = game_fsm.INIT_ROW4;
          } else {
            game_fsm.d = game_fsm.P_FISRT_SEL;
          }
        
        game_fsm.TOGGLE_PLAYER:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.PLAYER;
          bsel = BSel.CONST_1;
          regfile_we = 1;
          regfile_write_address = Reg.PLAYER;
          
          case (num_players) {
            1: game_fsm.d = game_fsm.TOGGLE_PLAYER_1;
            2: game_fsm.d = game_fsm.TOGGLE_PLAYER_2;
            3: game_fsm.d = game_fsm.TOGGLE_PLAYER_3;
            default: game_fsm.d = game_fsm.TOGGLE_PLAYER_1;
          }
        
        game_fsm.TOGGLE_PLAYER_1:
          alufn = Alufn.CMPLE;
          asel = ASel.CONST_2;
          regfile_read_address_b = Reg.PLAYER;
          regfile_we = 1;
          regfile_write_address = Reg.R0;
          
          game_fsm.d = game_fsm.TOGGLE_PLAYER_PVE_CHECK;
        
        game_fsm.TOGGLE_PLAYER_PVE_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R0;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
             // if player < 2
            game_fsm.d = game_fsm.XOR_12;
          } else {
            game_fsm.d = game_fsm.TOGGLE_PLAYER_RESET;
          }
        
        game_fsm.TOGGLE_PLAYER_2:
          alufn = Alufn.CMPLE;
          asel = ASel.CONST_2;
          regfile_read_address_b = Reg.PLAYER;
          regfile_we = 1;
          regfile_write_address = Reg.R0;
          
          game_fsm.d = game_fsm.TOGGLE_PLAYER_PVP_CHECK;
          
        game_fsm.TOGGLE_PLAYER_3:
          alufn = Alufn.CMPLE;
          asel = ASel.CONST_3;
          regfile_read_address_b = Reg.PLAYER;
          regfile_we = 1;
          regfile_write_address = Reg.R0;
          
          game_fsm.d = game_fsm.TOGGLE_PLAYER_PVP_CHECK;
        
        game_fsm.TOGGLE_PLAYER_PVP_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R0;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
             // if player < 2
            game_fsm.d = game_fsm.P_FISRT_SEL;
          } else {
            game_fsm.d = game_fsm.TOGGLE_PLAYER_RESET;
          }
        
        
        game_fsm.TOGGLE_PLAYER_RESET:
          alufn = Alufn.B;
          bsel = BSel.CONST_0;
          regfile_we = 1;
          regfile_write_address = Reg.PLAYER;
          game_fsm.d = game_fsm.P_FISRT_SEL;
          
        game_fsm.P_FISRT_SEL:
          case (c{btn_r1, btn_r2, btn_r3, btn_r4}) {
            b1000: game_fsm.d = game_fsm.P_R1_FIRST;
            b0100: game_fsm.d = game_fsm.P_R2_FIRST;
            b0010: game_fsm.d = game_fsm.P_R3_FIRST;
            b0001: game_fsm.d = game_fsm.P_R4_FIRST;
            default: game_fsm.d = game_fsm.P_FISRT_SEL;
          }
        
        // =====================================
        // =========== FIRST ROW ===============
        // =====================================
        
        game_fsm.P_R1_FIRST:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW1;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.P_FISRT_SEL;
          } else {
            game_fsm.d = game_fsm.P_R1_REMOVE;
          }
        
        game_fsm.P_R1_REMOVE:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW1;
          bsel = BSel.CONST_1;
          regfile_write_address = Reg.ROW1;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.P_R1_IDLE;
        
        game_fsm.P_R1_IDLE:
          if (btn_r1) {
            game_fsm.d = game_fsm.P_R1_CHECK;
          } else if (btn_toggle) {
            game_fsm.d = game_fsm.SUM_12;
          } else {
            game_fsm.d = game_fsm.P_R1_IDLE;
          }
        
        game_fsm.P_R1_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW1;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.P_R1_IDLE;
          } else {
            game_fsm.d = game_fsm.P_R1_REMOVE;
          }
        
        // =====================================
        // ========== SECOND ROW ===============
        // =====================================

        game_fsm.P_R2_FIRST:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW2;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.P_FISRT_SEL;
          } else {
            game_fsm.d = game_fsm.P_R2_REMOVE;
          }
        
        game_fsm.P_R2_REMOVE:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW2;
          bsel = BSel.CONST_1;
          regfile_write_address = Reg.ROW2;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.P_R2_IDLE;
        
        game_fsm.P_R2_IDLE:
          if (btn_r2) {
            game_fsm.d = game_fsm.P_R2_CHECK;
          } else if (btn_toggle) {
            game_fsm.d = game_fsm.SUM_12;
          } else {
            game_fsm.d = game_fsm.P_R2_IDLE;
          }
        
        game_fsm.P_R2_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW2;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.P_R2_IDLE;
          } else {
            game_fsm.d = game_fsm.P_R2_REMOVE;
          }
        
        // =====================================
        // =========== THIRD ROW ===============
        // =====================================
        
        game_fsm.P_R3_FIRST:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW3;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.P_FISRT_SEL;
          } else {
            game_fsm.d = game_fsm.P_R3_REMOVE;
          }
        
        game_fsm.P_R3_REMOVE:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW3;
          bsel = BSel.CONST_1;
          regfile_write_address = Reg.ROW3;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.P_R3_IDLE;
        
        game_fsm.P_R3_IDLE:
          if (btn_r3) {
            game_fsm.d = game_fsm.P_R3_CHECK;
          } else if (btn_toggle) {
            game_fsm.d = game_fsm.SUM_12;
          } else {
            game_fsm.d = game_fsm.P_R3_IDLE;
          }
        
        game_fsm.P_R3_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW3;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.P_R3_IDLE;
          } else {
            game_fsm.d = game_fsm.P_R3_REMOVE;
          }
        
        // =====================================
        // ========== FOURTH ROW ===============
        // =====================================
        
        game_fsm.P_R4_FIRST:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW4;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.P_FISRT_SEL;
          } else {
            game_fsm.d = game_fsm.P_R4_REMOVE;
          }
        
        game_fsm.P_R4_REMOVE:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW4;
          bsel = BSel.CONST_1;
          regfile_write_address = Reg.ROW4;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.P_R4_IDLE;
        
        game_fsm.P_R4_IDLE:
          if (btn_r4) {
            game_fsm.d = game_fsm.P_R4_CHECK;
          } else if (btn_toggle) {
            game_fsm.d = game_fsm.SUM_12;
          } else {
            game_fsm.d = game_fsm.P_R4_IDLE;
          }
        
        game_fsm.P_R4_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW4;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.P_R4_IDLE;
          } else {
            game_fsm.d = game_fsm.P_R4_REMOVE;
          }
        
        // =====================================
        // ============ PVE MODE ===============
        // =====================================
        game_fsm.XOR_12:
          alufn = Alufn.XOR;
          regfile_read_address_a = Reg.ROW1;
          regfile_read_address_b = Reg.ROW2;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R0;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.XOR_123;
        
        game_fsm.XOR_123:
          alufn = Alufn.XOR;
          regfile_read_address_a = Reg.R0;
          regfile_read_address_b = Reg.ROW3;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R0;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.XOR_1234;
        
        game_fsm.XOR_1234:
          alufn = Alufn.XOR;
          regfile_read_address_a = Reg.R0;
          regfile_read_address_b = Reg.ROW4;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R0;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.E_R1_COMPUTE;
        
        game_fsm.E_R1_COMPUTE:
          alufn = Alufn.XOR;
          regfile_read_address_a = Reg.R0;
          regfile_read_address_b = Reg.ROW1;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R1;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.E_R1_CHECK;
        
        game_fsm.E_R1_CHECK:
          alufn = Alufn.CMPLT;
          regfile_read_address_a = Reg.R1;
          regfile_read_address_b = Reg.ROW1;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R2;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.E_R1_CHECK_BRANCH;
        
        game_fsm.E_R1_CHECK_BRANCH:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R2;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.E_R2_COMPUTE;
          } else {
            game_fsm.d = game_fsm.E_R1_REMOVE;
          }
        
        game_fsm.E_R1_REMOVE:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R1;
          bsel = BSel.CONST_0;
          
          regfile_write_address = Reg.ROW1;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.SUM_12;
        
        game_fsm.E_R2_COMPUTE:
          alufn = Alufn.XOR;
          regfile_read_address_a = Reg.R0;
          regfile_read_address_b = Reg.ROW2;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R1;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.E_R2_CHECK;
        
        game_fsm.E_R2_CHECK:
          alufn = Alufn.CMPLT;
          regfile_read_address_a = Reg.R1;
          regfile_read_address_b = Reg.ROW2;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R2;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.E_R2_CHECK_BRANCH;
        
        game_fsm.E_R2_CHECK_BRANCH:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R2;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.E_R3_COMPUTE;
          } else {
            game_fsm.d = game_fsm.E_R2_REMOVE;
          }
        
        game_fsm.E_R2_REMOVE:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R1;
          bsel = BSel.CONST_0;
          
          regfile_write_address = Reg.ROW2;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.SUM_12;
        
        game_fsm.E_R3_COMPUTE:
          alufn = Alufn.XOR;
          regfile_read_address_a = Reg.R0;
          regfile_read_address_b = Reg.ROW3;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R1;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.E_R3_CHECK;
        
        game_fsm.E_R3_CHECK:
          alufn = Alufn.CMPLT;
          regfile_read_address_a = Reg.R1;
          regfile_read_address_b = Reg.ROW3;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R2;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.E_R3_CHECK_BRANCH;
        
        game_fsm.E_R3_CHECK_BRANCH:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R2;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.E_R4_COMPUTE;
          } else {
            game_fsm.d = game_fsm.E_R3_REMOVE;
          }
        
        game_fsm.E_R3_REMOVE:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R1;
          bsel = BSel.CONST_0;
          
          regfile_write_address = Reg.ROW3;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.SUM_12;
        
        game_fsm.E_R4_COMPUTE:
          alufn = Alufn.XOR;
          regfile_read_address_a = Reg.R0;
          regfile_read_address_b = Reg.ROW4;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R1;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.E_R4_CHECK;
        
        game_fsm.E_R4_CHECK:
          alufn = Alufn.CMPLT;
          regfile_read_address_a = Reg.R1;
          regfile_read_address_b = Reg.ROW4;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R2;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.E_R4_CHECK_BRANCH;
        
        game_fsm.E_R4_CHECK_BRANCH:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R2;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.E_R2_NZ_CHECK;
          } else {
            game_fsm.d = game_fsm.E_R4_REMOVE;
          }
        
        game_fsm.E_R4_REMOVE:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R1;
          bsel = BSel.CONST_0;
          
          regfile_write_address = Reg.ROW4;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.SUM_12;
        
        game_fsm.E_R2_NZ_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW2;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.E_R3_NZ_CHECK;
          } else {
            game_fsm.d = game_fsm.E_R2_REMOVE_ONE;
          }
        
        game_fsm.E_R3_NZ_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW3;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.E_R1_NZ_CHECK;
          } else {
            game_fsm.d = game_fsm.E_R3_REMOVE_ONE;
          }
        
        game_fsm.E_R1_NZ_CHECK:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW1;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.E_R4_REMOVE_ONE;
          } else {
            game_fsm.d = game_fsm.E_R1_REMOVE_ONE;
          }
        
        game_fsm.E_R1_REMOVE_ONE:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW1;
          bsel = BSel.CONST_1;
          regfile_write_address = Reg.ROW1;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.SUM_12;
        
        game_fsm.E_R2_REMOVE_ONE:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW2;
          bsel = BSel.CONST_1;
          regfile_write_address = Reg.ROW2;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.SUM_12;
        
        game_fsm.E_R3_REMOVE_ONE:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW3;
          bsel = BSel.CONST_1;
          regfile_write_address = Reg.ROW3;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.SUM_12;
        
        game_fsm.E_R4_REMOVE_ONE:
          alufn = Alufn.SUB;
          regfile_read_address_a = Reg.ROW4;
          bsel = BSel.CONST_1;
          regfile_write_address = Reg.ROW4;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.SUM_12;
        
        
        // =====================================
        // ========= CHECK WINNER ==============
        // =====================================
        
        game_fsm.SUM_12:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.ROW1;
          regfile_read_address_b = Reg.ROW2;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R0;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.SUM_123;
        
        game_fsm.SUM_123:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R0;
          regfile_read_address_b = Reg.ROW3;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R0;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.SUM_1234;
        
        game_fsm.SUM_1234:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R0;
          regfile_read_address_b = Reg.ROW4;
          bsel = BSel.REG_B;
          
          regfile_write_address = Reg.R0;
          regfile_we = 1;
          
          game_fsm.d = game_fsm.CHECK_SUM;
        
        game_fsm.CHECK_SUM:
          alufn = Alufn.ADD;
          regfile_read_address_a = Reg.R0;
          bsel = BSel.CONST_0;
          
          if (alu_z) {
            game_fsm.d = game_fsm.END;
          } else {
            game_fsm.d = game_fsm.TOGGLE_PLAYER;
          }
        
        game_fsm.END:
          halted = 1;
          game_fsm.d = game_fsm.END;
      }
    }
  }
}
