/* NIM game machine
defines the data path that utilizes ALU, control unit (game fsm) and regfiles
*/

global ASel {
  const REG_A = 0;
  const RANDOM = 1;
  const CONST_2 = 2;
  const CONST_3 = 3;
}

global BSel {
  const REG_B = 0;
  const CONST_0 = 1;
  const CONST_1 = 2;
  const CONST_7 = 3;
}

module game_machine (
    input clk,  // clock
    input rst,  // reset
    
    input btn_r1,
    input btn_r2,
    input btn_r3,
    input btn_r4,
    input btn_toggle,
    input num_players[2],
    
    output led_r1[8],
    output led_r2[8],
    output led_r3[8],
    output led_r4[8],
    output led_player1,
    output led_player2,
    output led_player3,
    output led_end
  ) {
  
  .clk(clk) {
    .rst(rst) {
      game_fsm game_controlunit;
      game_regfiles regfiles;
    }
    random_gen random_gen;
  }
  
  alu game_alu;
  
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  
  stones_decoder r1_decoder(.in(regfiles.display[2:0]));
  stones_decoder r2_decoder(.in(regfiles.display[5:3]));
  stones_decoder r3_decoder(.in(regfiles.display[8:6]));
  stones_decoder r4_decoder(.in(regfiles.display[11:9]));
  
  always {
    // game control unit input
    game_controlunit.btn_r1 = btn_r1;
    game_controlunit.btn_r2 = btn_r2;
    game_controlunit.btn_r3 = btn_r3;
    game_controlunit.btn_r4 = btn_r4;
    game_controlunit.btn_toggle = btn_toggle;
    game_controlunit.num_players = num_players;
    
    game_controlunit.alu_z = game_alu.z;
  
    // setup REGFILE unit 
    regfiles.we = game_controlunit.regfile_we;
    regfiles.write_address = game_controlunit.regfile_write_address;
    regfiles.data = game_alu.out;
   
    regfiles.read_address_a = game_controlunit.regfile_read_address_a;
    regfiles.read_address_b = game_controlunit.regfile_read_address_b;
    
    // asel mux
    case(game_controlunit.asel) {
      ASel.REG_A:   inputAlu_a = regfiles.out_a;
      ASel.RANDOM:  inputAlu_a = random_gen.num;
      ASel.CONST_2: inputAlu_a = 2;
      ASel.CONST_3: inputAlu_a = 3;
      default:      inputAlu_a = 0;
    }
    
    // bsel mux
    case(game_controlunit.bsel) {
      BSel.REG_B:   inputAlu_b = regfiles.out_b;
      BSel.CONST_0: inputAlu_b = 0;
      BSel.CONST_1: inputAlu_b = 1;
      BSel.CONST_7: inputAlu_b = 7;
      default : inputAlu_b = 0;
    }
    
    // alu
    game_alu.a = inputAlu_a;
    game_alu.b = inputAlu_b;
    game_alu.alufn = game_controlunit.alufn;
    
    // display
    // show number of stones of each row
    led_r1 = r1_decoder.out;
    led_r2 = r2_decoder.out;
    led_r3 = r3_decoder.out;
    led_r4 = r4_decoder.out;
    // show current player
    led_player1 = 0;
    led_player2 = 0;
    led_player3 = 0;
    case (regfiles.display[13:12]) {
      0: led_player1 = 1;
      1: led_player2 = 1;
      2: led_player3 = 1;
    }
    // game over led
    led_end = game_controlunit.halted;
  }
}
