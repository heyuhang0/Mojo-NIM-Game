global Reg {
  const R0 = 0;
  const R1 = 1;
  const R2 = 7;
  const ROW1 = 2;
  const ROW2 = 3;
  const ROW3 = 4;
  const ROW4 = 5;
  const ROW_SEL = 5;
  const PLAYER = 6;
  const CONST_ZERO = 15;
}

module game_regfiles (
    input clk,  // clock
    input rst,  // reset
    
    input write_address[4], // write address
    input we, // write enable
    input data[16], // data in
    
    input read_address_a[4], //address port a 
    input read_address_b[4], //address port b
    output out_a[16], //read port a
    output out_b[16], //read port b
    
    output display[16]
  ) {
  
  .clk(clk){
    .rst(rst){
      // temp variables
      dff r0[16];
      dff r1[16];
      dff r2[16];
      // number of stones in each row
      dff row1_stones[16](#INIT(1));
      dff row2_stones[16](#INIT(3));
      dff row3_stones[16](#INIT(5));
      dff row4_stones[16](#INIT(7));
      // row select
      dff row_sel[16];
      // current player
      dff player[16];
    }
  }

  always {
    
    if (we) {
      case(write_address) {
        Reg.R0: r0.d = data;
        Reg.R1: r1.d = data;
        Reg.R2: r2.d = data;
        Reg.ROW1: row1_stones.d = data;
        Reg.ROW2: row2_stones.d = data;
        Reg.ROW3: row3_stones.d = data;
        Reg.ROW4: row4_stones.d = data;
        Reg.ROW_SEL: row_sel.d = data;
        Reg.PLAYER: player.d = data;
      }
    }
    
    case(read_address_a) {
      Reg.R0: out_a = r0.q;
      Reg.R1: out_a = r1.q;
      Reg.R2: out_a = r2.q;
      Reg.ROW1: out_a = row1_stones.q;
      Reg.ROW2: out_a = row2_stones.q;
      Reg.ROW3: out_a = row3_stones.q;
      Reg.ROW4: out_a = row4_stones.q;
      Reg.ROW_SEL: out_a = row_sel.q;
      Reg.PLAYER: out_a = player.q;
      default: out_a = 0;
    }
    
    case(read_address_b) {
      Reg.R0: out_b = r0.q;
      Reg.R1: out_b = r1.q;
      Reg.R2: out_b = r2.q;
      Reg.ROW1: out_b = row1_stones.q;
      Reg.ROW2: out_b = row2_stones.q;
      Reg.ROW3: out_b = row3_stones.q;
      Reg.ROW4: out_b = row4_stones.q;
      Reg.ROW_SEL: out_b = row_sel.q;
      Reg.PLAYER: out_b = player.q;
      default: out_b = 0;
    }
    
    display[2:0] = row1_stones.q[2:0];
    display[5:3] = row2_stones.q[2:0];
    display[8:6] = row3_stones.q[2:0];
    display[11:9] = row4_stones.q[2:0];
    display[12] = player.q[0];
  }
}
