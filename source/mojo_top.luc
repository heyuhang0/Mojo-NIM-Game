module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
  
    .rst(rst) {
      game_machine machine;
    }
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    // process button signal
    button_conditioner btn_r1_conditioner(.in(io_button[3]));
    button_conditioner btn_r2_conditioner(.in(io_button[1]));
    button_conditioner btn_r3_conditioner(.in(io_button[4]));
    button_conditioner btn_r4_conditioner(.in(io_button[2]));
    button_conditioner btn_toggle_conditioner(.in(io_button[0]));
    
    edge_detector btn_r1(#RISE(1), #FALL(0), .in(btn_r1_conditioner.out));
    edge_detector btn_r2(#RISE(1), #FALL(0), .in(btn_r2_conditioner.out));
    edge_detector btn_r3(#RISE(1), #FALL(0), .in(btn_r3_conditioner.out));
    edge_detector btn_r4(#RISE(1), #FALL(0), .in(btn_r4_conditioner.out));
    edge_detector btn_toggle(#RISE(1), #FALL(0), .in(btn_toggle_conditioner.out));
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // setup inputs for game machine
    machine.btn_r1 = btn_r1.out;
    machine.btn_r2 = btn_r2.out;
    machine.btn_r3 = btn_r3.out;
    machine.btn_r4 = btn_r4.out;
    machine.btn_toggle = btn_toggle.out;
    machine.num_players = io_dip[0][1:0];
    
    // setup outputs for game machine
    io_led[2] = machine.led_r1;
    io_led[1] = machine.led_r2;
    io_led[0] = machine.led_r3;
    led = machine.led_r4;
    
    io_sel[3] = machine.led_player1;
    io_sel[2] = machine.led_player2;
    io_sel[1] = machine.led_player3;
    io_sel[0] = machine.led_end;
    io_seg = 0;
  }
}