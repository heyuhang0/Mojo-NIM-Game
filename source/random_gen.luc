/*
Pseudo-random Number Generator:
this module will generate a random 16-bit integer at every clock cycle
based on Xorshift (https://en.wikipedia.org/wiki/Xorshift)

It is based on pn_gen module in mojo component library, but modifications are made
so that it resets only when power up and not affected by rst signal
*/
module random_gen #(
    // SEED needs to always be non-zero
    // Since seed is XORed with the 32MSBs of SEED, we need the 96 LSBs to be nonzero.
    SEED = 128h843233523a613966423b622562592c62: SEED.WIDTH == 128 && SEED[95:0] != 0
  )(
    input clk,       // clock
    output num [16]  // "random" number output
  ) {
  
  .clk(clk) {
    dff x[32], y[32], z[32], w[32], initd; // state storage
  }
  
  sig t [32];                       // temporary results
  
  always {
    num = w.q[15:0];                // output is from w
    t = x.q ^ (x.q << 11);          // calculate intermediate value

    x.d = y.q;                      // shift values along
    y.d = z.q;                   
    z.d = w.q;
    
    // magic formula from Wikipedia
    w.d = w.q ^ (w.q >> 19) ^ t ^ (t >> 8);

    // Manually reset the flip-flops so we can change the reset value
    // only run once
    if (!initd.q) {
      x.d = SEED[0+:32];
      y.d = SEED[32+:32];
      z.d = SEED[64+:32];
      w.d = SEED[96+:32];
      initd.d = 1;
    }
  }
}